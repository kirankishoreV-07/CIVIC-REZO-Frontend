import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  ActivityIndicator,
  StatusBar,
  Modal,
  Platform,
  TextInput,
  Keyboard,
} from 'react-native';
import MapView, { Marker, Callout, Circle } from 'react-native-maps';
import { Ionicons, MaterialIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import * as Location from 'expo-location';
import EnvironmentalTheme from '../../theme/EnvironmentalTheme';
import { API_BASE_URL, apiClient, makeApiCall } from '../../../config/supabase';

// Using API_BASE_URL from config instead of hardcoded URL
// This ensures consistent API access across different environments

// Note: EnvironmentalTheme is now imported directly at the top of the file

const ComplaintMapScreen = ({ navigation, route }) => {
  // Safe theme access functions
  const getThemeColor = (path, defaultColor) => {
    try {
      // Parse dot notation path like 'primary.main'
      const parts = path.split('.');
      let value = EnvironmentalTheme;
      for (const part of parts) {
        if (!value || typeof value !== 'object') return defaultColor;
        value = value[part];
      }
      return value || defaultColor;
    } catch (e) {
      return defaultColor;
    }
  };
  
  const getGradient = (name, defaultGradient) => {
    try {
      return EnvironmentalTheme?.gradients?.[name] || defaultGradient;
    } catch (e) {
      return defaultGradient;
    }
  };
  
  const getThemeValue = (path, defaultValue) => {
    try {
      // Parse dot notation path like 'shadows.medium'
      const parts = path.split('.');
      let value = EnvironmentalTheme;
      for (const part of parts) {
        if (!value || typeof value !== 'object') return defaultValue;
        value = value[part];
      }
      return value || defaultValue;
    } catch (e) {
      return defaultValue;
    }
  };

  // Safely access route props with fallbacks
  const routeParams = route?.params || {};
  
  const [complaints, setComplaints] = useState([]);
  const [heatMapData, setHeatMapData] = useState([]); // Initialize as empty array
  const [loading, setLoading] = useState(true);
  const [selectedComplaint, setSelectedComplaint] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [filterStatus, setFilterStatus] = useState('all');
  const [statistics, setStatistics] = useState(null);
  const [showSearchModal, setShowSearchModal] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchMarker, setSearchMarker] = useState(null);
  const [recentSearches, setRecentSearches] = useState([]);
  const searchQueryRef = React.useRef('');
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [region, setRegion] = useState({
    latitude: 11.0168,
    longitude: 76.9558,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });
  const [mapRef, setMapRef] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(new Date());
  const [isFetching, setIsFetching] = useState(false);
  const [showHeatmap, setShowHeatmap] = useState(true);
  // Use ref to track fetching state across renders
  const isFetchingRef = React.useRef(false);

  // Fetch user location, complaint data, etc...
  // Note: Implementation details omitted for brevity, but remain unchanged

  // Format date for display
  const formatDate = (dateStr) => {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
      });
    } catch (e) {
      return dateStr || 'Unknown date';
    }
  };

  // Format time for last updated display
  const formatTimeAgo = (date) => {
    try {
      const now = new Date();
      const diff = Math.floor((now - date) / 1000); // Seconds
      
      if (diff < 60) return 'just now';
      if (diff < 3600) return `${Math.floor(diff / 60)} min ago`;
      if (diff < 86400) return `${Math.floor(diff / 3600)} hr ago`;
      return formatDate(date);
    } catch (e) {
      return 'Unknown';
    }
  };

  // Search Modal Component
  const SearchModal = () => (
    <Modal
      visible={showSearchModal}
      animationType="slide"
      transparent={true}
      onRequestClose={() => setShowSearchModal(false)}
    >
      <View style={styles.modalContainer}>
        <View style={styles.searchModalContent}>
          <View style={styles.searchModalHeader}>
            <Text style={styles.searchModalTitle}>Search Location</Text>
            <TouchableOpacity onPress={() => setShowSearchModal(false)}>
              <Ionicons name="close" size={24} color={getThemeColor('neutral.gray700', '#616161')} />
            </TouchableOpacity>
          </View>
          
          <View style={styles.searchInputContainer}>
            <Ionicons name="search" size={20} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
            <TextInput
              style={styles.searchInput}
              placeholder="Enter city, address or landmark"
              value={searchQuery}
              onChangeText={(text) => {
                searchQueryRef.current = text;
                setSearchQuery(text);
              }}
              autoFocus={true}
              returnKeyType="search"
              onSubmitEditing={() => {
                if (!isSearching && searchQuery.trim()) {
                  Keyboard.dismiss();
                  searchLocation();
                }
              }}
              keyboardType="default"
              autoCapitalize="none"
              autoCorrect={false}
              multiline={false}
              blurOnSubmit={false}
              enablesReturnKeyAutomatically={true}
              maxLength={100}
            />
            {searchQuery.length > 0 && (
              <TouchableOpacity onPress={() => {
                setSearchQuery('');
                searchQueryRef.current = '';
              }}>
                <Ionicons name="close-circle" size={20} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
              </TouchableOpacity>
            )}
          </View>
          
          <TouchableOpacity 
            style={[
              styles.searchButton, 
              (!(searchQueryRef.current || searchQuery).trim() || isSearching) && styles.disabledSearchButton
            ]}
            onPress={() => {
              if (!isSearching && (searchQueryRef.current || searchQuery).trim()) {
                Keyboard.dismiss();
                searchLocation();
              }
            }}
            disabled={!(searchQueryRef.current || searchQuery).trim() || isSearching}
          >
            {isSearching ? (
              <ActivityIndicator color="white" size="small" />
            ) : (
              <>
                <Ionicons name="search" size={18} color="white" />
                <Text style={styles.searchButtonText}>Search Location</Text>
              </>
            )}
          </TouchableOpacity>
          
          {/* Recent searches section */}
          {recentSearches.length > 0 && (
            <View style={styles.recentSearchesContainer}>
              <Text style={styles.recentSearchesTitle}>Recent Searches</Text>
              
              {recentSearches.map((search, index) => (
                <TouchableOpacity 
                  key={`${search.query}-${index}`}
                  style={styles.recentSearchItem}
                  onPress={() => {
                    setSearchQuery(search.query);
                    searchQueryRef.current = search.query;
                    Keyboard.dismiss();
                    setTimeout(() => searchLocation(), 100); // Small delay to ensure query is set
                  }}
                >
                  <Ionicons name="time-outline" size={16} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
                  <Text style={styles.recentSearchText}>{search.query}</Text>
                  <Ionicons name="chevron-forward" size={16} color={getThemeColor('neutral.gray400', '#BDBDBD')} />
                </TouchableOpacity>
              ))}
              
              <TouchableOpacity 
                style={styles.clearSearchesButton}
                onPress={() => setRecentSearches([])}
              >
                <Text style={styles.clearSearchesText}>Clear All</Text>
              </TouchableOpacity>
            </View>
          )}
        </View>
      </View>
    </Modal>
  );

  // Filters Modal Component
  const FiltersModal = () => (
    <Modal
      visible={showFilters}
      animationType="slide"
      transparent={true}
      onRequestClose={() => setShowFilters(false)}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Filter Complaints</Text>
            <TouchableOpacity 
              onPress={() => setShowFilters(false)}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color={getThemeColor('neutral.gray700', '#616161')} />
            </TouchableOpacity>
          </View>

          <View style={styles.filterOptions}>
            {[
              { key: 'all', label: 'All Complaints', icon: 'apps' },
              { key: 'pending', label: 'Pending', icon: 'time', color: '#FF4444' },
              { key: 'in_progress', label: 'In Progress', icon: 'sync', color: '#FF8800' },
              { key: 'completed', label: 'Completed', icon: 'checkmark-circle', color: '#00AA44' },
            ].map((option) => (
              <TouchableOpacity
                key={option.key}
                style={[
                  styles.filterOption,
                  filterStatus === option.key && styles.filterOptionActive
                ]}
                onPress={() => {
                  setFilterStatus(option.key);
                  setShowFilters(false);
                }}
              >
                <Ionicons 
                  name={option.icon} 
                  size={24} 
                  color={option.color || getThemeColor('primary.main', '#2E7D32')} 
                />
                <Text style={styles.filterLabel}>{option.label}</Text>
                {filterStatus === option.key && (
                  <Ionicons 
                    name="checkmark-circle" 
                    size={18} 
                    color={getThemeColor('primary.main', '#2E7D32')} 
                    style={styles.checkIcon}
                  />
                )}
              </TouchableOpacity>
            ))}
          </View>
        </View>
      </View>
    </Modal>
  );

  // Calculate distance between two coordinates in kilometers
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371; // Radius of the earth in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2); 
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
    const distance = R * c; // Distance in km
    return distance;
  };
  
  // Helper function for distance calculation
  const deg2rad = (deg) => {
    return deg * (Math.PI/180);
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={getThemeColor('primary.main', '#2E7D32')} />
      
      {/* Header */}
      <LinearGradient
        colors={EnvironmentalTheme?.gradients?.forest || ['#1B5E20', '#2E7D32', '#60AD5E']}
        style={styles.header}
      >
        <View style={styles.headerContent}>
          <TouchableOpacity 
            onPress={() => navigation.goBack()}
            style={styles.backButton}
          >
            <Ionicons name="arrow-back" size={24} color="white" />
          </TouchableOpacity>
          
          <View style={styles.headerTitleContainer}>
            <Ionicons name="map" size={24} color="white" />
            <Text style={styles.headerTitle}>Complaint Map</Text>
          </View>

          <TouchableOpacity 
            onPress={() => setShowFilters(true)}
            style={styles.filterButton}
          >
            <Ionicons name="filter" size={24} color="white" />
          </TouchableOpacity>
        </View>
        
        {/* Search Bar */}
        <TouchableOpacity 
          style={styles.searchBar}
          onPress={() => {
            // Don't clear the previous search when opening modal
            setShowSearchModal(true);
          }}
        >
          <Ionicons name="search" size={20} color={getThemeColor('neutral.gray500', '#9E9E9E')} />
          <Text style={styles.searchPlaceholder}>Tap to search for city, landmark or address...</Text>
          <Ionicons name="locate" size={20} color={getThemeColor('primary.main', '#2E7D32')} />
        </TouchableOpacity>

        {/* Statistics Bar */}
        {statistics && (
          <View style={styles.statsBar}>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#FF4444' }]} />
              <Text style={styles.statText}>{statistics.pending} Pending</Text>
            </View>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#FF8800' }]} />
              <Text style={styles.statText}>{statistics.active} Active</Text>
            </View>
            <View style={styles.statItem}>
              <View style={[styles.statIndicator, { backgroundColor: '#00AA44' }]} />
              <Text style={styles.statText}>{statistics.resolved} Resolved</Text>
            </View>
          </View>
        )}
      </LinearGradient>
      
      {/* Search Modal */}
      <SearchModal />
      
      {/* Filters Modal */}
      <FiltersModal />

      {/* Map Container */}
      <View style={styles.mapContainer}>
        {loading && (
          <View style={styles.loadingOverlay}>
            <ActivityIndicator size="large" color={getThemeColor('primary.main', '#2E7D32')} />
            <Text style={styles.loadingText}>Loading map...</Text>
          </View>
        )}
        
        <MapView
          ref={(ref) => setMapRef(ref)}
          style={styles.map}
          initialRegion={region}
          region={region}
          onRegionChangeComplete={setRegion}
          showsUserLocation={true}
          showsMyLocationButton={false}
          showsCompass={true}
          loadingEnabled={true}
          zoomEnabled={true}
          zoomControlEnabled={true}
          provider="google"
          mapType="standard"
        >
          {/* Center debug marker */}
          <Marker
            coordinate={{
              latitude: region.latitude,
              longitude: region.longitude
            }}
            pinColor="#FF0000"
            title="Center Position"
            description="This marker shows the map center is working"
          />
          
          {/* Custom Heatmap implementation using Circle components */}
          {showHeatmap && heatMapData && Array.isArray(heatMapData) && heatMapData.length > 0 && 
            heatMapData.map((point, index) => {
              // Calculate radius and color based on weight
              const weight = point.weight || 1;
              const baseRadius = 80; // Base radius in meters
              const radius = baseRadius + (weight * 20); // Scale radius by weight
              
              // Color gradient from yellow to red based on weight
              const greenValue = Math.max(0, 255 - (weight * 60));
              const fillColor = `rgba(255, ${greenValue}, 0, 0.3)`;
              const strokeColor = `rgba(255, ${greenValue}, 0, 0.8)`;
              
              return (
                <Circle
                  key={`heatcircle-${index}`}
                  center={{
                    latitude: point.latitude,
                    longitude: point.longitude
                  }}
                  radius={radius}
                  fillColor={fillColor}
                  strokeColor={strokeColor}
                  strokeWidth={1}
                  zIndex={5}
                />
              );
            })
          }
          
          {/* Complaint markers at heatmap points */}
          {showHeatmap && heatMapData && Array.isArray(heatMapData) && heatMapData.length > 0 && 
            heatMapData.map((point, index) => (
              <Marker
                key={`heatpoint-${index}`}
                coordinate={{
                  latitude: point.latitude,
                  longitude: point.longitude
                }}
                anchor={{x: 0.5, y: 0.5}}
                zIndex={10}
                opacity={0.8}
              >
                <View style={{
                  width: 10,
                  height: 10,
                  borderRadius: 5,
                  backgroundColor: `rgba(255, ${Math.max(0, 200 - (point.weight * 50))}, 0, 0.9)`,
                  borderWidth: 1,
                  borderColor: 'white'
                }} />
              </Marker>
            ))
          }
          
          {/* Render complaint markers */}
          {getFilteredComplaints().length > 0 && 
            getFilteredComplaints().map((complaint) => (
              <Marker
                key={complaint.id}
                coordinate={{
                  latitude: parseFloat(complaint.latitude || 0),
                  longitude: parseFloat(complaint.longitude || 0)
                }}
                pinColor={getStatusColor(complaint.status)}
                onPress={() => setSelectedComplaint(complaint)}
              >
                <Callout tooltip>
                  <View style={styles.calloutContainer}>
                    <Text style={styles.calloutTitle}>{complaint.title}</Text>
                    <Text style={styles.calloutDescription}>{complaint.description}</Text>
                    <View style={styles.calloutDetails}>
                      <View style={[styles.calloutStatus, { backgroundColor: getStatusColor(complaint.status) }]}>
                        <Text style={styles.calloutStatusText}>
                          {complaint.status === 'in_progress' ? 'In Progress' : 
                           (complaint.status === 'completed' ? 'Completed' : 'Pending')}
                        </Text>
                      </View>
                      <Text style={styles.calloutDate}>{formatDate(complaint.created_at)}</Text>
                    </View>
                  </View>
                </Callout>
              </Marker>
            ))
          }
          
          {/* Render search result marker if available */}
          {searchMarker && (
            <Marker
              key="search-marker"
              coordinate={{
                latitude: searchMarker.latitude,
                longitude: searchMarker.longitude
              }}
              pinColor="#3498db"  // Different color for search result
            >
              <Callout tooltip>
                <View style={[styles.calloutContainer, styles.searchCalloutContainer]}>
                  <Text style={styles.calloutTitle}>
                    <Ionicons name="location" size={14} color="#3498db" /> Searched Location
                  </Text>
                  <Text style={styles.calloutDescription}>
                    {searchMarker.title || searchMarker.description || 'Location found from your search'}
                  </Text>
                  <TouchableOpacity 
                    style={styles.searchDirectionsButton}
                    onPress={() => {
                      // Clear search marker
                      setSearchMarker(null);
                      
                      // Alert for demo purposes - in real app would open maps
                      Alert.alert(
                        'Get Directions',
                        'This would open maps app with directions in a real app.',
                        [{ text: 'OK' }]
                      );
                    }}
                  >
                    <Text style={styles.searchDirectionsText}>Get Directions</Text>
                  </TouchableOpacity>
                </View>
              </Callout>
            </Marker>
          )}
        </MapView>
      </View>

      {/* Loading Indicator */}
      {loading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={getThemeColor('primary.main', '#2E7D32')} />
          <Text style={styles.loadingText}>Loading complaints...</Text>
        </View>
      )}
      
      {/* No Data Message */}
      {!loading && getFilteredComplaints().length === 0 && (
        <View style={styles.emptyStateContainer}>
          <Ionicons 
            name="alert-circle-outline" 
            size={64} 
            color={EnvironmentalTheme.neutral.gray500 || '#9E9E9E'} 
          />
          <Text style={styles.emptyStateTitle}>No Complaints Found</Text>
          <Text style={styles.emptyStateText}>There are no complaints to display for the current filter settings.</Text>
          <TouchableOpacity 
            style={[
              styles.emptyStateButton, 
              isFetching && styles.disabledButton
            ]}
            onPress={() => !isFetchingRef.current && fetchComplaintData()}
            disabled={isFetching || isFetchingRef.current}
          >
            <Text style={styles.emptyStateButtonText}>
              {isFetching || isFetchingRef.current ? 'Loading...' : 'Refresh Data'}
            </Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Refresh Button */}
      <TouchableOpacity
        style={[
          styles.refreshButton,
          (isFetching || isFetchingRef.current) && styles.disabledButton
        ]}
        onPress={() => !isFetchingRef.current && fetchComplaintData()}
        disabled={isFetching || isFetchingRef.current}
      >
        <LinearGradient
          colors={
            (isFetching || isFetchingRef.current)
              ? ['#A5D6A7', '#C8E6C9']  // Lighter colors when disabled
              : [getThemeColor('primary.main', '#2E7D32'), getThemeColor('primary.light', '#60AD5E')]
          }
          style={styles.refreshGradient}
        >
          {(isFetching || isFetchingRef.current) ? (
            <ActivityIndicator size="small" color="white" />
          ) : (
            <Ionicons name="refresh" size={20} color="white" />
          )}
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Auto-Refresh Toggle */}
      <TouchableOpacity
        style={[
          styles.autoRefreshButton,
          autoRefresh && styles.autoRefreshButtonActive
        ]}
        onPress={() => setAutoRefresh(!autoRefresh)}
      >
        <LinearGradient
          colors={
            autoRefresh 
              ? [getThemeColor('status.success', '#4CAF50'), getThemeColor('status.success', '#388E3C')]
              : [getThemeColor('neutral.gray400', '#BDBDBD'), getThemeColor('neutral.gray600', '#757575')]
          }
          style={styles.refreshGradient}
        >
          <View style={styles.autoRefreshContent}>
            <Ionicons 
              name={autoRefresh ? "sync-circle" : "sync"} 
              size={18} 
              color="white" 
            />
            <Text style={styles.autoRefreshText}>
              {autoRefresh ? 'Auto' : 'Live'}
            </Text>
          </View>
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Heatmap Toggle with enhanced feedback */}
      <TouchableOpacity
        style={[
          styles.heatmapButton,
          showHeatmap && styles.heatmapButtonActive
        ]}
        onPress={() => {
          setShowHeatmap(!showHeatmap);
          // Show feedback to user
          if (!showHeatmap && heatMapData && Array.isArray(heatMapData) && heatMapData.length > 0) {
            Alert.alert(
              "Heatmap Activated", 
              `Showing ${heatMapData.length} priority hotspots on the map.`,
              [{ text: "OK", style: "default" }],
              { cancelable: true }
            );
          }
        }}
      >
        <LinearGradient
          colors={
            showHeatmap 
              ? [getThemeColor('status.warning', '#FFA000'), getThemeColor('status.danger', '#FF5722')]
              : [getThemeColor('neutral.gray400', '#BDBDBD'), getThemeColor('neutral.gray600', '#757575')]
          }
          style={styles.refreshGradient}
        >
          <View style={styles.heatmapContent}>
            <MaterialIcons 
              name={showHeatmap ? "layers" : "layers-clear"} 
              size={18} 
              color="white" 
            />
            <Text style={styles.heatmapText}>
              {showHeatmap ? 'Heatmap On' : 'Heatmap Off'}
            </Text>
          </View>
        </LinearGradient>
      </TouchableOpacity>
      
      {/* My Location Button */}
      <TouchableOpacity
        style={styles.myLocationButton}
        onPress={goToUserLocation}
      >
        <LinearGradient
          colors={[getThemeColor('secondary.light', '#58A5F0'), getThemeColor('secondary.main', '#0277BD')]}
          style={styles.myLocationGradient}
        >
          <Ionicons name="locate" size={24} color="white" />
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Test API Button - for debugging */}
      <TouchableOpacity
        style={[styles.myLocationButton, styles.testButton]}
        onPress={testApiEndpoints}
      >
        <LinearGradient
          colors={[getThemeColor('warning.light', '#FFA726'), getThemeColor('warning.main', '#F57C00')]}
          style={styles.myLocationGradient}
        >
          <Ionicons name="code-working" size={24} color="white" />
        </LinearGradient>
      </TouchableOpacity>
      
      {/* Test Heatmap Button - for debugging */}
      <TouchableOpacity
        style={[styles.myLocationButton, styles.testHeatmapButton]}
        onPress={generateTestHeatmap}
      >
        <LinearGradient
          colors={[getThemeColor('error.light', '#F48FB1'), getThemeColor('error.main', '#E91E63')]}
          style={styles.myLocationGradient}
        >
          <MaterialIcons name="grain" size={24} color="white" />
        </LinearGradient>
      </TouchableOpacity>

      {/* Last Updated */}
      <View style={styles.lastUpdatedContainer}>
        <Ionicons name="time-outline" size={14} color={getThemeColor('neutral.gray600', '#757575')} />
        <Text style={styles.lastUpdatedText}>Updated {formatTimeAgo(lastUpdated)}</Text>
      </View>
      
      {/* Debug info for heatmap */}
      {showHeatmap && (
        <View style={styles.debugHeatmapOverlay}>
          <Text style={styles.debugText}>
            {heatMapData && Array.isArray(heatMapData) && heatMapData.length > 0 
              ? `Hotspots: ${heatMapData.length} visible | 
                 Tap hotspots to view details` 
              : "No hotspot data available (try test button)"}
          </Text>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  mapContainer: {
    flex: 1,
    position: 'relative',
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255,255,255,0.7)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#2E7D32',
  },
  disabledButton: {
    opacity: 0.7,
  },
  disabledSearchButton: {
    opacity: 0.6,
    backgroundColor: '#A5D6A7', // Lighter green
  },
  recentSearchesContainer: {
    marginTop: 8,
  },
  recentSearchesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 12,
    color: '#424242',
  },
  recentSearchItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  recentSearchText: {
    flex: 1,
    marginLeft: 12,
    color: '#616161',
    fontSize: 14,
  },
  clearSearchesButton: {
    alignSelf: 'flex-end',
    marginTop: 12,
    padding: 8,
  },
  clearSearchesText: {
    color: '#F44336',
    fontSize: 14,
  },
  header: {
    paddingTop: StatusBar.currentHeight || 50,
    paddingBottom: 12,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    marginBottom: 8,
  },
  headerTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerTitle: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  backButton: {
    padding: 4,
  },
  filterButton: {
    padding: 4,
  },
  searchBar: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    borderRadius: 24,
    marginHorizontal: 16,
    marginVertical: 8,
    paddingHorizontal: 16,
    paddingVertical: 10,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 1.5,
  },
  searchPlaceholder: {
    flex: 1,
    marginLeft: 8,
    color: '#9E9E9E',
    fontSize: 14,
  },
  map: {
    flex: 1,
  },
  statsBar: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    marginHorizontal: 16,
    marginTop: 4,
    paddingVertical: 8,
    borderRadius: 16,
  },
  statItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  statIndicator: {
    width: 10,
    height: 10,
    borderRadius: 5,
    marginRight: 4,
  },
  statText: {
    fontSize: 12,
    color: '#616161',
  },
  calloutContainer: {
    width: 200,
    backgroundColor: 'white',
    borderRadius: 8,
    padding: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.15,
    shadowRadius: 3,
  },
  calloutTitle: {
    fontWeight: 'bold',
    fontSize: 14,
    marginBottom: 4,
    color: '#333333',
  },
  calloutDescription: {
    fontSize: 12,
    marginBottom: 8,
    color: '#666666',
  },
  calloutDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  calloutStatus: {
    paddingVertical: 2,
    paddingHorizontal: 6,
    borderRadius: 4,
  },
  calloutStatusText: {
    fontSize: 10,
    color: 'white',
    fontWeight: 'bold',
  },
  calloutDate: {
    fontSize: 10,
    color: '#9E9E9E',
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.7)',
  },
  refreshButton: {
    position: 'absolute',
    bottom: 90, // Above the bottom navigation if any
    right: 16,
    width: 54,
    height: 54,
    borderRadius: 27,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  refreshGradient: {
    width: 54,
    height: 54,
    borderRadius: 27,
    justifyContent: 'center',
    alignItems: 'center',
  },
  autoRefreshButton: {
    position: 'absolute',
    bottom: 154, // Above the refresh button
    right: 16,
    width: 80,
    height: 34,
    borderRadius: 17,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  heatmapButton: {
    position: 'absolute',
    bottom: 198, // Above the auto-refresh button
    right: 16,
    width: 120,
    height: 34,
    borderRadius: 17,
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  myLocationButton: {
    position: 'absolute',
    bottom: 20,
    right: 16,
    width: 54,
    height: 54,
    borderRadius: 27,
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 3,
  },
  myLocationGradient: {
    width: 54,
    height: 54,
    borderRadius: 27,
    justifyContent: 'center',
    alignItems: 'center',
  },
  testButton: {
    bottom: 170, // Position above the location button
    right: 16,
  },
  testHeatmapButton: {
    bottom: 230, // Position above the test API button
    right: 16,
  },
  debugHeatmapOverlay: {
    position: 'absolute',
    top: 90,
    left: 10,
    zIndex: 1000,
    padding: 8,
    borderRadius: 8,
    backgroundColor: 'rgba(0,0,0,0.7)',
  },
  debugText: {
    color: 'white',
    padding: 5,
    fontSize: 12,
    fontWeight: 'bold',
  },
  heatpointMarker: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: 'rgba(255,100,0,0.7)',
  },
  autoRefreshButtonActive: {
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 4.65,
  },
  heatmapButtonActive: {
    elevation: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 4.65,
  },
  autoRefreshContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  heatmapContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  autoRefreshText: {
    color: 'white',
    fontWeight: 'bold',
    marginLeft: 4,
    fontSize: 12,
  },
  heatmapText: {
    color: 'white',
    fontWeight: 'bold',
    marginLeft: 4,
    fontSize: 12,
  },
  lastUpdatedContainer: {
    position: 'absolute',
    bottom: 30,
    right: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 12,
  },
  lastUpdatedText: {
    color: '#757575',
    marginLeft: 4,
    fontSize: 11,
  },
  emptyStateContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    padding: 32,
  },
  emptyStateTitle: {
    fontSize: 22,
    fontWeight: 'bold',
    color: EnvironmentalTheme.primary.main || '#2E7D32',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    fontSize: 16,
    color: EnvironmentalTheme.neutral.gray700 || '#616161',
    textAlign: 'center',
    marginBottom: 24,
  },
  emptyStateButton: {
    backgroundColor: EnvironmentalTheme.primary.main || '#2E7D32',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 24,
  },
  emptyStateButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  searchCalloutContainer: {
    backgroundColor: '#FFFFFF',
    borderLeftColor: '#3498db',
    borderLeftWidth: 4,
  },
  searchDirectionsButton: {
    backgroundColor: '#3498db',
    padding: 8,
    borderRadius: 4,
    marginTop: 8,
    alignItems: 'center',
  },
  searchDirectionsText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 12,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  searchModalContent: {
    backgroundColor: 'white',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
    maxHeight: '80%',
  },
  searchModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  searchModalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  searchInputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 8,
    paddingHorizontal: 12,
    marginBottom: 16,
  },
  searchInput: {
    flex: 1,
    height: 46,
    paddingHorizontal: 8,
    fontSize: 16,
  },
  searchButton: {
    backgroundColor: '#2E7D32',
    borderRadius: 8,
    paddingVertical: 12,
    alignItems: 'center',
    flexDirection: 'row',
    justifyContent: 'center',
  },
  searchButtonText: {
    color: 'white',
    fontWeight: 'bold',
    marginLeft: 8,
  },
  modalContent: {
    backgroundColor: 'white',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    padding: 4,
  },
  filterOptions: {
    marginTop: 8,
  },
  filterOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 8,
    borderRadius: 8,
    marginBottom: 8,
  },
  filterOptionActive: {
    backgroundColor: '#E8F5E9',
  },
  filterLabel: {
    marginLeft: 16,
    fontSize: 16,
    color: '#424242',
    flex: 1,
  },
  checkIcon: {
    marginLeft: 8,
  },
});

export default ComplaintMapScreen;
